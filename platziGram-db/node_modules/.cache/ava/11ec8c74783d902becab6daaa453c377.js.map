{"version":3,"sources":["db-test.js"],"names":["test","require","Db","uuid","r","fixtures","dbName","v4","db","before","t","connect","true","connected","after","disconnect","false","always","conn","dbDrop","run","is","saveImage","image","getImage","created","url","description","deepEqual","tags","likes","liked","user_id","id","public_id","encode","truthy","createdAt","likeImage","creted","result"],"mappings":"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","file":"db-test.js","sourcesContent":["'use strict'\r\n/**\r\n * Import dependencies\r\n * @type\r\n *    test  Ava Depencie external,\r\n *    Db  Database Dependencie,\r\n *    uuid  Id genereted dependencie external,\r\n *    r  conection Db rethinksdb external,\r\n *    fixture  data default for test\r\n */\r\nconst test = require('ava')\r\nconst Db = require('../')\r\nconst uuid = require('uuid-base62')\r\nconst r = require('rethinkdb')\r\nconst fixtures = require('./fixtures/index')\r\n\r\nconst dbName = `plazigram_${uuid.v4()}`\r\nconst db = new Db({db: dbName})\r\n\r\n/**\r\n * Connection to DB\r\n */\r\ntest.before('setup db', async t => {\r\n  await db.connect()\r\n  t.true(db.connected, 'should be connect')\r\n})\r\n\r\n/**\r\n * Disconect to DB\r\n */\r\ntest.after('disconnect database', async t => {\r\n  await db.disconnect()\r\n  t.false(db.connected, 'should not be connect')\r\n})\r\n\r\n/*\r\n * Delete DB Test\r\n */\r\ntest.after.always('cleanup database', async t => {\r\n  let conn = await r.connect({})\r\n  await r.dbDrop(dbName).run(conn)\r\n})\r\n\r\n/**\r\n * Testin for Save Images\r\n */\r\ntest('save image', async t => {\r\n  t.is(typeof db.saveImage, 'function', 'saveImage is function')\r\n  let image = fixtures.getImage()\r\n\r\n  let created = await db.saveImage(image)\r\n  t.is(created.url, image.url)\r\n  t.is(created.description, image.description)\r\n  t.deepEqual(created.tags, ['awesome', 'tags'])\r\n  t.is(created.likes, image.likes)\r\n  t.is(created.liked, image.liked)\r\n  t.is(created.user_id, image.user_id)\r\n  t.is(typeof created.id, 'string')\r\n  t.is(created.public_id, uuid.encode(created.id))\r\n  t.truthy(created.createdAt)\r\n})\r\n\r\ntest('Like image', async t => {\r\n  t.is(typeof db.likeImage, 'function', 'likeImage is a function')\r\n  let image = fixtures.getImage()\r\n  let creted = await db.saveImage(image)\r\n  let result = await db.likeImage(creted.public_id)\r\n\r\n  t.true(result.liked)\r\n  t.is(result.likes, image.likes + 1)\r\n})\r\n"]}