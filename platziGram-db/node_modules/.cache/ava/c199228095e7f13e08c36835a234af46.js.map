{"version":3,"sources":["db-test.js"],"names":["test","require","Db","uuid","r","fixtures","utils","beforeEach","t","dbName","v4","db","connect","context","true","connected","afterEach","always","disconnect","false","conn","dbDrop","run","is","saveImage","image","getImage","created","url","description","deepEqual","tags","likes","liked","userId","id","publicId","encode","truthy","createdAt","likeImage","creted","result","throws","getImages","images","saveImages","map","sabeImage","img","Promise","all","length","saveUser","user","getUser","pass","password","name","email","username","encrypt","authenticate","plainPassword","fail","failure","getImageByUser","random","Math","floor","i","push","getImageByTag","tag"],"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,KAAKD,QAAQ,KAAR,CAAX;AACA,MAAME,OAAOF,QAAQ,aAAR,CAAb;AACA,MAAMG,IAAIH,QAAQ,WAAR,CAAV;AACA,MAAMI,WAAWJ,QAAQ,kBAAR,CAAjB;AACA,MAAMK,QAAQL,QAAQ,cAAR,CAAd;AACA;;;AAGAD,KAAKO,UAAL,CAAgB,UAAhB;AAAA,+BAA4B,WAAMC,CAAN,EAAW;AAAA;;AACrC,UAAMC,SAAU,aAAYN,KAAKO,EAAL,EAAU,EAAtC;AACA,UAAMC,KAAK,IAAIT,EAAJ,CAAO,EAACS,IAAIF,MAAL,EAAP,CAAX;AACA,UAAME,GAAGC,OAAH,EAAN;AACAJ,MAAEK,OAAF,CAAUF,EAAV,GAAeA,EAAf;AACAH,MAAEK,OAAF,CAAUJ,MAAV,GAAmBA,MAAnB;AACAD,MAAEM,IAAF,uBAAO,qCAAGC,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAqB,mBAArB;AACD,GAPD;;AAAA;AAAA;AAAA;AAAA;;AASA;;;AAGAf,KAAKgB,SAAL,CAAeC,MAAf,CAAsB,kBAAtB;AAAA,gCAA0C,WAAMT,CAAN,EAAW;AAAA;;AACnD,QAAIG,KAAKH,EAAEK,OAAF,CAAUF,EAAnB;AACA,QAAIF,SAASD,EAAEK,OAAF,CAAUJ,MAAvB;AACA,UAAME,GAAGO,UAAH,EAAN;AACAV,MAAEW,KAAF,yBAAQ,sCAAGJ,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAsB,uBAAtB;AACA,QAAIK,OAAO,MAAMhB,EAAEQ,OAAF,CAAU,EAAV,CAAjB;AACA,UAAMR,EAAEiB,MAAF,CAASZ,MAAT,EAAiBa,GAAjB,CAAqBF,IAArB,CAAN;AACD,GAPD;;AAAA;AAAA;AAAA;AAAA;AAQA;;;AAGApB,KAAK,YAAL;AAAA,gCAAmB,WAAMQ,CAAN,EAAW;AAAA;;AAC5B,QAAIG,KAAKH,EAAEK,OAAF,CAAUF,EAAnB;;AAEAH,MAAEe,EAAF,CAAK,OAAOZ,GAAGa,SAAf,EAA0B,UAA1B,EAAsC,uBAAtC;AACA,QAAIC,QAAQpB,SAASqB,QAAT,EAAZ;AACA,QAAIC,UAAU,MAAMhB,GAAGa,SAAH,CAAaC,KAAb,CAApB;AACAjB,MAAEe,EAAF,CAAKI,QAAQC,GAAb,EAAkBH,MAAMG,GAAxB;AACApB,MAAEe,EAAF,CAAKI,QAAQE,WAAb,EAA0BJ,MAAMI,WAAhC;AACArB,MAAEsB,SAAF,CAAYH,QAAQI,IAApB,EAA0B,CAAC,SAAD,EAAY,MAAZ,CAA1B;AACAvB,MAAEe,EAAF,CAAKI,QAAQK,KAAb,EAAoBP,MAAMO,KAA1B;AACAxB,MAAEe,EAAF,CAAKI,QAAQM,KAAb,EAAoBR,MAAMQ,KAA1B;AACAzB,MAAEe,EAAF,CAAKI,QAAQO,MAAb,EAAqBT,MAAMS,MAA3B;AACA1B,MAAEe,EAAF,CAAK,OAAOI,QAAQQ,EAApB,EAAwB,QAAxB;AACA3B,MAAEe,EAAF,CAAKI,QAAQS,QAAb,EAAuBjC,KAAKkC,MAAL,CAAYV,QAAQQ,EAApB,CAAvB;AACA3B,MAAE8B,MAAF,yBAAS,2CAAQC,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,GAfD;;AAAA;AAAA;AAAA;AAAA;AAgBA;;;AAGAvC,KAAK,YAAL;AAAA,gCAAmB,WAAMQ,CAAN,EAAW;AAAA;;AAC5B,QAAIG,KAAKH,EAAEK,OAAF,CAAUF,EAAnB;AACAH,MAAEe,EAAF,CAAK,OAAOZ,GAAG6B,SAAf,EAA0B,UAA1B,EAAsC,yBAAtC;;AAEA,QAAIf,QAAQpB,SAASqB,QAAT,EAAZ;AACA,QAAIe,SAAS,MAAM9B,GAAGa,SAAH,CAAaC,KAAb,CAAnB;AACA,QAAIiB,SAAS,MAAM/B,GAAG6B,SAAH,CAAaC,OAAOL,QAApB,CAAnB;;AAEA5B,MAAEM,IAAF,yBAAO,0CAAOmB,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACAzB,MAAEe,EAAF,CAAKmB,OAAOV,KAAZ,EAAmBP,MAAMO,KAAN,GAAc,CAAjC;AACD,GAVD;;AAAA;AAAA;AAAA;AAAA;;AAYA;;;AAGAhC,KAAK,WAAL;AAAA,gCAAkB,WAAMQ,CAAN,EAAW;AAC3B,QAAIG,KAAKH,EAAEK,OAAF,CAAUF,EAAnB;AACAH,MAAEe,EAAF,CAAK,OAAOZ,GAAGe,QAAf,EAAyB,UAAzB,EAAqC,wBAArC;;AAEA,QAAID,QAAQpB,SAASqB,QAAT,CAAkB,CAAlB,CAAZ;AACA,QAAIC,UAAU,MAAMhB,GAAGa,SAAH,CAAaC,KAAb,CAApB;AACA,QAAIiB,SAAS,MAAM/B,GAAGe,QAAH,CAAYC,QAAQS,QAApB,CAAnB;;AAEA5B,MAAEsB,SAAF,CAAYY,MAAZ,EAAoBf,OAApB;;AAEA,UAAMnB,EAAEmC,MAAF,4HAAShC,GAAGe,QAAH,CAAY,KAAZ,CAAT,IAA6B,WAA7B,CAAN;AACD,GAXD;;AAAA;AAAA;AAAA;AAAA;AAYA;;;AAGA1B,KAAK,iBAAL;AAAA,gCAAwB,WAAMQ,CAAN,EAAW;AACjC,QAAIG,KAAKH,EAAEK,OAAF,CAAUF,EAAnB;AACAH,MAAEe,EAAF,CAAK,OAAOZ,GAAGiC,SAAf,EAA0B,UAA1B,EAAsC,yBAAtC;;AAEA,QAAIC,SAASxC,SAASuC,SAAT,EAAb;AACA,QAAIE,aAAaD,OAAOE,GAAP,CAAW;AAAA,aAAOpC,GAAGqC,SAAH,CAAaC,GAAb,CAAP;AAAA,KAAX,CAAjB;AACA,QAAItB,UAAU,MAAMuB,QAAQC,GAAR,CAAYL,UAAZ,CAApB;AACA,QAAIJ,SAAS,MAAM/B,GAAGiC,SAAH,EAAnB;AACApC,MAAEe,EAAF,CAAKI,QAAQyB,MAAb,EAAqBV,OAAOU,MAA5B;AACD,GATD;;AAAA;AAAA;AAAA;AAAA;AAUA;;;AAGApD,KAAK,WAAL;AAAA,gCAAkB,WAAMQ,CAAN,EAAW;AAAA;;AAC3B,QAAIG,KAAKH,EAAEK,OAAF,CAAUF,EAAnB;AACAH,MAAEe,EAAF,CAAK,OAAOZ,GAAG0C,QAAf,EAAyB,UAAzB,EAAqC,sBAArC;;AAEA,QAAIC,OAAOjD,SAASkD,OAAT,EAAX;AACA,QAAIC,OAAOF,KAAKG,QAAhB;AACA,QAAIf,SAAS,MAAM/B,GAAG0C,QAAH,CAAYC,IAAZ,CAAnB;;AAEA9C,MAAEe,EAAF,CAAK+B,KAAKI,IAAV,EAAgBhB,OAAOgB,IAAvB;AACAlD,MAAEe,EAAF,CAAK+B,KAAKK,KAAV,EAAiBjB,OAAOiB,KAAxB;AACAnD,MAAEe,EAAF,CAAK+B,KAAKM,QAAV,EAAoBlB,OAAOkB,QAA3B;AACApD,MAAEe,EAAF,CAAKjB,MAAMuD,OAAN,CAAcL,IAAd,CAAL,EAA0Bd,OAAOe,QAAjC;AACAjD,MAAEe,EAAF,CAAK,OAAOmB,OAAOP,EAAnB,EAAuB,QAAvB;AACA3B,MAAE8B,MAAF,yBAAS,0CAAOC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,GAdD;;AAAA;AAAA;AAAA;AAAA;AAeA;;;AAGAvC,KAAK,UAAL;AAAA,gCAAiB,WAAMQ,CAAN,EAAW;AAC1B,QAAIG,KAAKH,EAAEK,OAAF,CAAUF,EAAnB;AACAH,MAAEe,EAAF,CAAK,OAAOZ,GAAG4C,OAAf,EAAwB,UAAxB,EAAoC,uBAApC;;AAEA,QAAID,OAAOjD,SAASkD,OAAT,EAAX;AACA,QAAI5B,UAAU,MAAMhB,GAAG0C,QAAH,CAAYC,IAAZ,CAApB;AACA,QAAIZ,SAAS,MAAM/B,GAAG4C,OAAH,CAAWD,KAAKM,QAAhB,CAAnB;;AAEApD,MAAEsB,SAAF,CAAYY,MAAZ,EAAoBf,OAApB;;AAEA,UAAMnB,EAAEmC,MAAF,6HAAShC,GAAG4C,OAAH,CAAW,KAAX,CAAT,IAA4B,WAA5B,CAAN;AACD,GAXD;;AAAA;AAAA;AAAA;AAAA;AAYA;;;AAGAvD,KAAK,mBAAL;AAAA,gCAA0B,WAAMQ,CAAN,EAAW;AAAA;AAAA;AAAA;;AACnC,QAAIG,KAAKH,EAAEK,OAAF,CAAUF,EAAnB;AACAH,MAAEe,EAAF,CAAK,OAAOZ,GAAGmD,YAAf,EAA6B,UAA7B,EAAyC,0BAAzC;;AAEA,QAAIR,OAAOjD,SAASkD,OAAT,EAAX;AACA,QAAIQ,gBAAgBT,KAAKG,QAAzB;AACA,UAAM9C,GAAG0C,QAAH,CAAYC,IAAZ,CAAN;AACA,QAAIZ,SAAS,MAAM/B,GAAGmD,YAAH,CAAgBR,KAAKM,QAArB,EAA+BG,aAA/B,CAAnB;;AAEAvD,MAAEM,IAAF,yBAAO4B,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA,QAAIsB,OAAO,MAAMrD,GAAGmD,YAAH,CAAgBR,KAAKM,QAArB,EAA+B,KAA/B,CAAjB;;AAEApD,MAAEW,KAAF,yBAAQ6C,IAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA,QAAIC,UAAU,MAAMtD,GAAGmD,YAAH,CAAgB,KAAhB,EAAuB,KAAvB,CAApB;;AAEAtD,MAAEW,KAAF,yBAAQ8C,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,GAlBD;;AAAA;AAAA;AAAA;AAAA;AAmBA;;;AAGAjE,KAAK,sBAAL;AAAA,iCAA6B,WAAMQ,CAAN,EAAW;AACtC,QAAIG,KAAKH,EAAEK,OAAF,CAAUF,EAAnB;AACAH,MAAEe,EAAF,CAAK,OAAOZ,GAAGuD,cAAf,EAA+B,UAA/B,EAA2C,4BAA3C;AACA,QAAIrB,SAASxC,SAASuC,SAAT,CAAmB,EAAnB,CAAb;AACA,QAAIV,SAAS/B,KAAKA,IAAL,EAAb;AACA,QAAIgE,SAASC,KAAKC,KAAL,CAAYD,KAAKD,MAAL,KAAgBtB,OAAOO,MAAxB,GAAkC,CAA7C,CAAb;AACA,QAAI5B,YAAY,EAAhB;AACA,SAAK,IAAI8C,IAAI,CAAb,EAAgBA,IAAIzB,OAAOO,MAA3B,EAAmCkB,GAAnC,EAAwC;AACtC,UAAIA,IAAIH,MAAR,EAAgB;AACdtB,eAAOyB,CAAP,EAAUpC,MAAV,GAAmBA,MAAnB;AACD;AACDV,gBAAU+C,IAAV,CAAe5D,GAAGa,SAAH,CAAaqB,OAAOyB,CAAP,CAAb,CAAf;AACD;;AAED,UAAMpB,QAAQC,GAAR,CAAY3B,SAAZ,CAAN;;AAEA,QAAIkB,SAAS,MAAM/B,GAAGuD,cAAH,CAAkBhC,MAAlB,CAAnB;AACA1B,MAAEe,EAAF,CAAKmB,OAAOU,MAAZ,EAAoBe,MAApB;AACD,GAlBD;;AAAA;AAAA;AAAA;AAAA;AAmBA;;;AAGAnE,KAAK,qBAAL;AAAA,iCAA4B,WAAMQ,CAAN,EAAW;AACrC,QAAIG,KAAKH,EAAEK,OAAF,CAAUF,EAAnB;AACAH,MAAEe,EAAF,CAAK,OAAOZ,GAAG6D,aAAf,EAA8B,UAA9B,EAA0C,2BAA1C;AACA,QAAI3B,SAASxC,SAASuC,SAAT,CAAmB,EAAnB,CAAb;AACA,QAAI6B,MAAM,WAAV;AACA,QAAIN,SAASC,KAAKC,KAAL,CAAYD,KAAKD,MAAL,KAAgBtB,OAAOO,MAAxB,GAAkC,CAA7C,CAAb;AACA,QAAI5B,YAAY,EAAhB;AACA,SAAK,IAAI8C,IAAI,CAAb,EAAgBA,IAAIzB,OAAOO,MAA3B,EAAmCkB,GAAnC,EAAwC;AACtC,UAAIA,IAAIH,MAAR,EAAgB;AACdtB,eAAOyB,CAAP,EAAUzC,WAAV,GAAwB4C,GAAxB;AACD;AACDjD,gBAAU+C,IAAV,CAAe5D,GAAGa,SAAH,CAAaqB,OAAOyB,CAAP,CAAb,CAAf;AACD;;AAED,UAAMpB,QAAQC,GAAR,CAAY3B,SAAZ,CAAN;;AAEA,QAAIkB,SAAS,MAAM/B,GAAG6D,aAAH,CAAiBC,GAAjB,CAAnB;AACAjE,MAAEe,EAAF,CAAKmB,OAAOU,MAAZ,EAAoBe,MAApB;AACD,GAlBD;;AAAA;AAAA;AAAA;AAAA","file":"db-test.js","sourcesContent":["'use strict'\r\n/**\r\n * Import dependencies\r\n * @type\r\n *    test  Ava Depencie external,\r\n *    Db  Database Dependencie,\r\n *    uuid  Id genereted dependencie external,\r\n *    r  conection Db rethinksdb external,\r\n *    fixture  data default for test\r\n */\r\nconst test = require('ava')\r\nconst Db = require('../')\r\nconst uuid = require('uuid-base62')\r\nconst r = require('rethinkdb')\r\nconst fixtures = require('./fixtures/index')\r\nconst utils = require('../lib/utils')\r\n/**\r\n * Connection to DB\r\n */\r\ntest.beforeEach('setup db', async t => {\r\n  const dbName = `plazigram_${uuid.v4()}`\r\n  const db = new Db({db: dbName})\r\n  await db.connect()\r\n  t.context.db = db\r\n  t.context.dbName = dbName\r\n  t.true(db.connected, 'should be connect')\r\n})\r\n\r\n/**\r\n * Disconect to DB\r\n */\r\ntest.afterEach.always('cleanUp database', async t => {\r\n  let db = t.context.db\r\n  let dbName = t.context.dbName\r\n  await db.disconnect()\r\n  t.false(db.connected, 'should not be connect')\r\n  let conn = await r.connect({})\r\n  await r.dbDrop(dbName).run(conn)\r\n})\r\n/**\r\n * Testin for Save Images\r\n */\r\ntest('save image', async t => {\r\n  let db = t.context.db\r\n\r\n  t.is(typeof db.saveImage, 'function', 'saveImage is function')\r\n  let image = fixtures.getImage()\r\n  let created = await db.saveImage(image)\r\n  t.is(created.url, image.url)\r\n  t.is(created.description, image.description)\r\n  t.deepEqual(created.tags, ['awesome', 'tags'])\r\n  t.is(created.likes, image.likes)\r\n  t.is(created.liked, image.liked)\r\n  t.is(created.userId, image.userId)\r\n  t.is(typeof created.id, 'string')\r\n  t.is(created.publicId, uuid.encode(created.id))\r\n  t.truthy(created.createdAt)\r\n})\r\n/**\r\n * Testing add like image\r\n */\r\ntest('Like image', async t => {\r\n  let db = t.context.db\r\n  t.is(typeof db.likeImage, 'function', 'likeImage is a function')\r\n\r\n  let image = fixtures.getImage()\r\n  let creted = await db.saveImage(image)\r\n  let result = await db.likeImage(creted.publicId)\r\n\r\n  t.true(result.liked)\r\n  t.is(result.likes, image.likes + 1)\r\n})\r\n\r\n/**\r\n * Testin get Image\r\n */\r\ntest('Get image', async t => {\r\n  let db = t.context.db\r\n  t.is(typeof db.getImage, 'function', 'getImage is a function')\r\n\r\n  let image = fixtures.getImage(3)\r\n  let created = await db.saveImage(image)\r\n  let result = await db.getImage(created.publicId)\r\n\r\n  t.deepEqual(result, created)\r\n\r\n  await t.throws(db.getImage('foo'), /not found/)\r\n})\r\n/**\r\n * testing get images\r\n */\r\ntest('List all Images', async t => {\r\n  let db = t.context.db\r\n  t.is(typeof db.getImages, 'function', 'getImages is a function')\r\n\r\n  let images = fixtures.getImages()\r\n  let saveImages = images.map(img => db.sabeImage(img))\r\n  let created = await Promise.all(saveImages)\r\n  let result = await db.getImages()\r\n  t.is(created.length, result.length)\r\n})\r\n/**\r\n * Testing Save User\r\n */\r\ntest('Save User', async t => {\r\n  let db = t.context.db\r\n  t.is(typeof db.saveUser, 'function', 'saveUser is funciont')\r\n\r\n  let user = fixtures.getUser()\r\n  let pass = user.password\r\n  let result = await db.saveUser(user)\r\n\r\n  t.is(user.name, result.name)\r\n  t.is(user.email, result.email)\r\n  t.is(user.username, result.username)\r\n  t.is(utils.encrypt(pass), result.password)\r\n  t.is(typeof result.id, 'string')\r\n  t.truthy(result.createdAt)\r\n})\r\n/**\r\n * Testing get User\r\n */\r\ntest('get user', async t => {\r\n  let db = t.context.db\r\n  t.is(typeof db.getUser, 'function', 'getUser is a function')\r\n\r\n  let user = fixtures.getUser()\r\n  let created = await db.saveUser(user)\r\n  let result = await db.getUser(user.username)\r\n\r\n  t.deepEqual(result, created)\r\n\r\n  await t.throws(db.getUser('foo'), /not found/)\r\n})\r\n/**\r\n * Testing Authenticate\r\n */\r\ntest('Authenticate User', async t => {\r\n  let db = t.context.db\r\n  t.is(typeof db.authenticate, 'function', 'authenticate is function')\r\n\r\n  let user = fixtures.getUser()\r\n  let plainPassword = user.password\r\n  await db.saveUser(user)\r\n  let result = await db.authenticate(user.username, plainPassword)\r\n\r\n  t.true(result)\r\n\r\n  let fail = await db.authenticate(user.username, '123')\r\n\r\n  t.false(fail)\r\n\r\n  let failure = await db.authenticate('foo', '123')\r\n\r\n  t.false(failure)\r\n})\r\n/**\r\n * Testing list images for USer\r\n */\r\ntest('list images for user', async t => {\r\n  let db = t.context.db\r\n  t.is(typeof db.getImageByUser, 'function', 'getImageByUser is function')\r\n  let images = fixtures.getImages(10)\r\n  let userId = uuid.uuid()\r\n  let random = Math.floor((Math.random() * images.length) + 1)\r\n  let saveImage = []\r\n  for (let i = 0; i < images.length; i++) {\r\n    if (i < random) {\r\n      images[i].userId = userId\r\n    }\r\n    saveImage.push(db.saveImage(images[i]))\r\n  }\r\n\r\n  await Promise.all(saveImage)\r\n\r\n  let result = await db.getImageByUser(userId)\r\n  t.is(result.length, random)\r\n})\r\n/**\r\n * Testing list images for Tag\r\n */\r\ntest('list images for Tag', async t => {\r\n  let db = t.context.db\r\n  t.is(typeof db.getImageByTag, 'function', 'getImageByTag is function')\r\n  let images = fixtures.getImages(10)\r\n  let tag = '#filterit'\r\n  let random = Math.floor((Math.random() * images.length) + 1)\r\n  let saveImage = []\r\n  for (let i = 0; i < images.length; i++) {\r\n    if (i < random) {\r\n      images[i].description = tag\r\n    }\r\n    saveImage.push(db.saveImage(images[i]))\r\n  }\r\n\r\n  await Promise.all(saveImage)\r\n\r\n  let result = await db.getImageByTag(tag)\r\n  t.is(result.length, random)\r\n})\r\n"]}