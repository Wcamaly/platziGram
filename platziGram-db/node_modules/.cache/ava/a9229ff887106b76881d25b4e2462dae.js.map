{"version":3,"sources":["db-test.js"],"names":["test","require","Db","uuid","r","dbName","v4","db","before","t","connect","true","connected","after","disconnect","false","always","conn","dbDrop","run","is","saveImage","image","description","url","likes","liked","user_id","created","deepEqual","tags","id","public_id","encode","truthy","createdAt"],"mappings":"AAAA;;;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,KAAKD,QAAQ,KAAR,CAAX;AACA,MAAME,OAAOF,QAAQ,aAAR,CAAb;AACA,MAAMG,IAAIH,QAAQ,WAAR,CAAV;AACA,MAAMI,SAAU,aAAYF,KAAKG,EAAL,EAAU,EAAtC;AACA,MAAMC,KAAK,IAAIL,EAAJ,CAAO,EAACK,IAAIF,MAAL,EAAP,CAAX;;AAEAL,KAAKQ,MAAL,CAAY,UAAZ;AAAA,+BAAwB,WAAMC,CAAN,EAAW;AAAA;;AACjC,UAAMF,GAAGG,OAAH,EAAN;AACAD,MAAEE,IAAF,uBAAO,qCAAGC,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAqB,mBAArB;AACD,GAHD;;AAAA;AAAA;AAAA;AAAA;;AAKAZ,KAAKa,KAAL,CAAW,qBAAX;AAAA,gCAAkC,WAAMJ,CAAN,EAAW;AAAA;;AAC3C,UAAMF,GAAGO,UAAH,EAAN;AACAL,MAAEM,KAAF,yBAAQ,sCAAGH,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAsB,uBAAtB;AACD,GAHD;;AAAA;AAAA;AAAA;AAAA;;AAKAZ,KAAKa,KAAL,CAAWG,MAAX,CAAkB,kBAAlB;AAAA,gCAAsC,WAAMP,CAAN,EAAW;AAC/C,QAAIQ,OAAO,MAAMb,EAAEM,OAAF,CAAU,EAAV,CAAjB;AACA,UAAMN,EAAEc,MAAF,CAASb,MAAT,EAAiBc,GAAjB,CAAqBF,IAArB,CAAN;AACD,GAHD;;AAAA;AAAA;AAAA;AAAA;;AAKAjB,KAAK,YAAL;AAAA,gCAAmB,WAAMS,CAAN,EAAW;AAAA;;AAC5BA,MAAEW,EAAF,CAAK,OAAOb,GAAGc,SAAf,EAA0B,UAA1B,EAAsC,uBAAtC;;AAEA,QAAIC,QAAQ;AACVC,mBAAa,gCADH;AAEVC,WAAM,2BAA0BrB,KAAKG,EAAL,EAAU,MAFhC;AAGVmB,aAAO,CAHG;AAIVC,aAAO,KAJG;AAKVC,eAASxB,KAAKA,IAAL;AALC,KAAZ;;AAQA,QAAIyB,UAAU,MAAMrB,GAAGc,SAAH,CAAaC,KAAb,CAApB;AACAb,MAAEW,EAAF,CAAKQ,QAAQJ,GAAb,EAAkBF,MAAME,GAAxB;AACAf,MAAEW,EAAF,CAAKQ,QAAQL,WAAb,EAA0BD,MAAMC,WAAhC;AACAd,MAAEoB,SAAF,CAAYD,QAAQE,IAApB,EAA0B,CAAC,SAAD,EAAY,MAAZ,CAA1B;AACArB,MAAEW,EAAF,CAAKQ,QAAQH,KAAb,EAAoBH,MAAMG,KAA1B;AACAhB,MAAEW,EAAF,CAAKQ,QAAQF,KAAb,EAAoBJ,MAAMI,KAA1B;AACAjB,MAAEW,EAAF,CAAKQ,QAAQD,OAAb,EAAsBL,MAAMK,OAA5B;AACAlB,MAAEW,EAAF,CAAK,OAAOQ,QAAQG,EAApB,EAAwB,QAAxB;AACAtB,MAAEW,EAAF,CAAKQ,QAAQI,SAAb,EAAwB7B,KAAK8B,MAAL,CAAYL,QAAQG,EAApB,CAAxB;AACAtB,MAAEyB,MAAF,yBAAS,2CAAQC,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,GArBD;;AAAA;AAAA;AAAA;AAAA","file":"db-test.js","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst Db = require('../')\r\nconst uuid = require('uuid-base62')\r\nconst r = require('rethinkdb')\r\nconst dbName = `plazigram_${uuid.v4()}`\r\nconst db = new Db({db: dbName})\r\n\r\ntest.before('setup db', async t => {\r\n  await db.connect()\r\n  t.true(db.connected, 'should be connect')\r\n})\r\n\r\ntest.after('disconnect database', async t => {\r\n  await db.disconnect()\r\n  t.false(db.connected, 'should not be connect')\r\n})\r\n\r\ntest.after.always('cleanup database', async t => {\r\n  let conn = await r.connect({})\r\n  await r.dbDrop(dbName).run(conn)\r\n})\r\n\r\ntest('save image', async t => {\r\n  t.is(typeof db.saveImage, 'function', 'saveImage is function')\r\n\r\n  let image = {\r\n    description: 'an #awesome picture with #tAgs',\r\n    url: `https://platzigram.test/${uuid.v4()}.jpg`,\r\n    likes: 0,\r\n    liked: false,\r\n    user_id: uuid.uuid()\r\n  }\r\n\r\n  let created = await db.saveImage(image)\r\n  t.is(created.url, image.url)\r\n  t.is(created.description, image.description)\r\n  t.deepEqual(created.tags, ['awesome', 'tags'])\r\n  t.is(created.likes, image.likes)\r\n  t.is(created.liked, image.liked)\r\n  t.is(created.user_id, image.user_id)\r\n  t.is(typeof created.id, 'string')\r\n  t.is(created.public_id, uuid.encode(created.id))\r\n  t.truthy(created.createdAt)\r\n})\r\n"]}